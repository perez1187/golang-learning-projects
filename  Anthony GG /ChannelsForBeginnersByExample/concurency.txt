package main

import (
	"fmt"
	"sync"
	"time"
)

func main() {
	now := time.Now()
	userID := 10
	respch := make(chan string, 100) //in that case  we need to buffer the channel

	// wait group, for waiting until concurency finish their task
	wg := &sync.WaitGroup{}

	// wg add is waiting for wg done, without done, deadlock
	// wg.Add(1)
	// wg.Done()
	// wg.Wait()

	go fetchUserData(userID, respch, wg) // we have to add wg
	// wg.Add(1) // we can also do like that
	go fetchUserRecommendations(userID, respch, wg)
	go fetchUserLikes(userID, respch, wg)

	wg.Add(3) // we add 3 task to wait for
	wg.Wait() // we tell to wait

	// we close the channel (bec nobody will use later,otherwise deadlock)
	close(respch)

	// we range over channell

	for resp := range respch {
		fmt.Println(resp)
	}

	fmt.Println(time.Since(now))
}

func fetchUserData(userID int, respch chan string, wg *sync.WaitGroup) {
	time.Sleep(80 * time.Millisecond)

	respch <- "User data"

	wg.Done()
}

func fetchUserRecommendations(userID int, respch chan string, wg *sync.WaitGroup) {
	time.Sleep(120 * time.Millisecond)

	respch <- "User recommendations"
	wg.Done()
}

func fetchUserLikes(userID int, respch chan string, wg *sync.WaitGroup) {
	time.Sleep(50 * time.Millisecond)

	respch <- "User likes"
	wg.Done()
}
